# Example: How to use generate_release_notes.py in GitHub Actions
# This replaces the old bash script approach

name: Example Release Workflow

on:
  push:
    tags:
      - '*-v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # OLD APPROACH (bash script):
      # - name: Prepare Simple Release Notes
      #   if: startsWith(github.ref, 'refs/tags/')
      #   run: |
      #     # 100+ lines of bash conditionals...
      #     echo "# ${{ inputs.base_package_name }} v${VERSION}" > release_notes.md
      #     if [ "${{ inputs.package_name }}" = "pylume" ]; then
      #       echo "## Python SDK..." >> release_notes.md
      #     elif [ "${{ inputs.package_name }}" = "computer" ]; then
      #       # ... more conditionals
      #     fi

      # NEW APPROACH (Python script):
      - name: Generate Release Notes
        run: |
          # Simple one-liner that reads from source of truth
          python3 .github/scripts/generate_release_notes.py \
            ${{ inputs.package_name }} \
            --output release_notes.md

          echo "Release notes created:"
          cat release_notes.md

      # Or with explicit version:
      - name: Generate Release Notes (with version)
        run: |
          VERSION=$(python3 .github/scripts/generate_release_notes.py \
            ${{ inputs.package_name }} | grep -oP '# \S+ v\K[0-9.]+')

          python3 .github/scripts/generate_release_notes.py \
            ${{ inputs.package_name }} \
            --version "$VERSION" \
            --output release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ============================================================================
# BENEFITS OF THE NEW APPROACH:
# ============================================================================
#
# 1. SOURCE OF TRUTH
#    - Versions come from pyproject.toml, not hardcoded
#    - Dependencies auto-resolved from the monorepo
#    - Handles both static and dynamic versioning
#
# 2. TESTABLE
#    - 15 unit tests ensure correctness
#    - Can test locally before pushing
#    - Test coverage for all package types
#
# 3. MAINTAINABLE
#    - Python code vs 100+ lines of bash
#    - Easy to understand and modify
#    - Centralized configuration
#
# 4. EXTENSIBLE
#    - Add new packages in one place
#    - Easy to add new sections
#    - Can output to different formats
#
# ============================================================================
# EXAMPLE: Integrating with existing bump-version.yml workflow
# ============================================================================

# In your .github/workflows/pypi-reusable-publish.yml:

jobs:
  publish:
    steps:
      # ... checkout, setup python, etc ...

      - name: Prepare Release Notes
        id: release_notes
        run: |
          # Generate release notes from source of truth
          python3 .github/scripts/generate_release_notes.py \
            ${{ inputs.package_name }} \
            --output release_notes.md

          # For pylume, we still need to inject LUME_VERSION for the binary
          if [[ "${{ inputs.package_name }}" == "pylume" ]]; then
            # Get lume version from GitHub releases or environment
            LUME_VERSION="${{ env.LUME_VERSION }}"
            sed -i "s/\${LUME_VERSION}/$LUME_VERSION/g" release_notes.md
          fi

          cat release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.tag_name }}
          name: ${{ inputs.base_package_name }} v${{ inputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: ${{ inputs.make_latest }}

# ============================================================================
# TESTING THE SCRIPT LOCALLY
# ============================================================================

# Run the script for any package:
# $ python3 .github/scripts/generate_release_notes.py cua-agent

# Test with custom version:
# $ python3 .github/scripts/generate_release_notes.py cua-agent --version 1.0.0

# Save to file:
# $ python3 .github/scripts/generate_release_notes.py cua-agent --output test.md

# Run tests:
# $ python3 .github/scripts/tests/test_generate_release_notes.py -v

# ============================================================================
# MIGRATION CHECKLIST
# ============================================================================

# [ ] Replace bash script in pypi-reusable-publish.yml
# [ ] Update bump-version.yml to use Python script
# [ ] Test with each package type:
#     [ ] pylume (dynamic version)
#     [ ] cua-agent (with extras)
#     [ ] cua-computer (basic)
#     [ ] cua-som (basic)
#     [ ] cua-computer-server (with usage)
#     [ ] cua-mcp-server (with additional sections)
# [ ] Handle LUME_VERSION injection for pylume
# [ ] Remove old bash script sections
# [ ] Update documentation
