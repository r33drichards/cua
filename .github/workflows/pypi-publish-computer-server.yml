name: Publish Computer Server Package

on:
  push:
    tags:
      - "computer-server-v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (without v prefix)"
        required: true
        default: "0.1.0"
  workflow_call:
    inputs:
      version:
        description: "Version to publish"
        required: true
        type: string
    outputs:
      version:
        description: "The version that was published"
        value: ${{ jobs.prepare.outputs.version }}

# Adding permissions at workflow level
permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install toml parser
        run: pip install toml

      - name: Determine version
        id: get-version
        run: |
          # First, try to extract version from git tag if triggered by tag push
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" =~ ^refs/tags/computer-server-v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "Extracted version from tag: $VERSION"
          # Next, try workflow dispatch input
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION=${{ github.event.inputs.version }}
            echo "Using version from workflow dispatch: $VERSION"
          # Next, try workflow_call input
          elif [ "${{ github.event_name }}" == "workflow_call" ] && [ -n "${{ inputs.version }}" ]; then
            VERSION=${{ inputs.version }}
            echo "Using version from workflow_call: $VERSION"
          else
            # Default: read from pyproject.toml
            echo "Reading version from pyproject.toml..."
            VERSION=$(python3 << EOF
          import toml
          with open("libs/python/computer-server/pyproject.toml") as f:
              data = toml.load(f)
              print(data.get("project", {}).get("version", ""))
          EOF
            )
            if [ -z "$VERSION" ]; then
              echo "Error: Could not extract version from pyproject.toml"
              exit 1
            fi
            echo "Extracted version from pyproject.toml: $VERSION"
          fi
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: prepare
    uses: ./.github/workflows/pypi-reusable-publish.yml
    with:
      package_name: "computer-server"
      package_dir: "libs/python/computer-server"
      version: ${{ needs.prepare.outputs.version }}
      is_lume_package: false
      base_package_name: "cua-computer-server"
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  set-env-variables:
    needs: [prepare, publish]
    runs-on: macos-latest
    steps:
      - name: Set environment variables for use in other jobs
        run: |
          echo "COMPUTER_VERSION=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
