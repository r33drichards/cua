name: Create Tags on Version Change

on:
  push:
    branches:
      - main
    paths:
      - 'libs/python/*/pyproject.toml'

permissions:
  contents: write

jobs:
  detect-and-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install toml parser
        run: pip install toml

      - name: Detect version changes and create tags
        id: detect-version-changes
        run: |
          # Create a Python script to parse TOML and detect changes
          cat > detect_version_changes.py << 'EOF'
          import subprocess
          import sys
          import toml
          import os
          from pathlib import Path

          # Define package mapping: directory name -> tag prefix
          PACKAGE_MAP = {
              "core": "core",
              "pylume": "pylume",
              "computer": "computer",
              "som": "som",
              "agent": "agent",
              "computer-server": "computer-server",
              "mcp-server": "mcp-server"
          }

          def get_changed_files():
              """Get list of changed files in the last commit"""
              result = subprocess.run(
                  ["git", "diff", "--name-only", "HEAD~1", "HEAD"],
                  capture_output=True,
                  text=True,
                  check=True
              )
              return result.stdout.strip().split('\n')

          def parse_pyproject_version(file_path):
              """Extract version from pyproject.toml"""
              try:
                  data = toml.load(file_path)
                  return data.get('project', {}).get('version')
              except Exception as e:
                  print(f"Error parsing {file_path}: {e}", file=sys.stderr)
                  return None

          def main():
              changed_files = get_changed_files()
              tags_to_create = []

              for file_path in changed_files:
                  # Check if this is a pyproject.toml in libs/python/
                  if not file_path.startswith('libs/python/') or not file_path.endswith('pyproject.toml'):
                      continue

                  # Extract package name from path
                  parts = file_path.split('/')
                  if len(parts) < 4:
                      continue

                  package_dir = parts[2]

                  if package_dir not in PACKAGE_MAP:
                      print(f"Unknown package directory: {package_dir}", file=sys.stderr)
                      continue

                  # Get current version
                  current_version = parse_pyproject_version(file_path)
                  if not current_version:
                      print(f"Could not parse version from {file_path}", file=sys.stderr)
                      continue

                  # Get previous version
                  try:
                      result = subprocess.run(
                          ["git", "show", f"HEAD~1:{file_path}"],
                          capture_output=True,
                          text=True,
                          check=True
                      )
                      # Write to temporary file for parsing
                      temp_file = f"/tmp/prev_{package_dir}_pyproject.toml"
                      with open(temp_file, 'w') as f:
                          f.write(result.stdout)
                      prev_version = parse_pyproject_version(temp_file)
                      os.remove(temp_file)
                  except subprocess.CalledProcessError:
                      # File might be new
                      prev_version = None

                  # Check if version changed
                  if prev_version != current_version:
                      tag_prefix = PACKAGE_MAP[package_dir]
                      tag_name = f"{tag_prefix}-v{current_version}"
                      tags_to_create.append(tag_name)
                      print(f"Version changed for {package_dir}: {prev_version} -> {current_version}")
                      print(f"Will create tag: {tag_name}")

              # Output tags for GitHub Actions
              if tags_to_create:
                  print(f"\nTags to create: {','.join(tags_to_create)}")
                  # Write to GitHub output
                  with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
                      f.write(f"tags={','.join(tags_to_create)}\n")
                      f.write(f"has_tags=true\n")
              else:
                  print("No version changes detected")
                  with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
                      f.write(f"has_tags=false\n")

          if __name__ == '__main__':
              main()
          EOF

          python detect_version_changes.py

      - name: Create and push tags
        id: create-tags
        if: steps.detect-version-changes.outputs.has_tags == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push each tag
          TAGS="${{ steps.detect-version-changes.outputs.tags }}"
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"

          for tag in "${TAG_ARRAY[@]}"; do
            echo "Creating tag: $tag"

            # Check if tag already exists
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Tag $tag already exists, skipping"
              continue
            fi

            # Create and push tag
            git tag -a "$tag" -m "Release $tag"
            git push origin "$tag"
            echo "Created and pushed tag: $tag"
          done
